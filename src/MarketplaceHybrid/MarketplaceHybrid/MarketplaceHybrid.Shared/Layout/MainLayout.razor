@using MarketplaceHybrid.Shared.Configurations
@using MarketplaceHybrid.Shared.Services.Interfaces
@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudThemeProvider Theme="AppTheme.DefaultTheme" />
<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Error" Dense="true">
        <!-- Botão de Menu -->
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />

        <!-- Título do Marketplace -->
        <MudText Typo="Typo.h6" Class="ml-2">Marketplace</MudText>

        <MudSpacer />

        <!-- Nome do Usuário e Menu -->
        @if (IsLoggedIn)
        {
            <MudMenu Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Dense="true">
                <MudMenuItem Class="px-2 py-1">Olá, @Username</MudMenuItem>
                <MudDivider />
                <MudMenuItem OnClick="IrParaPerfil" Class="px-2 py-1">Meu Perfil</MudMenuItem>
                <MudMenuItem OnClick="Logout" Class="px-2 py-1">Sair</MudMenuItem>
            </MudMenu>
        }

        <!-- Ícone do Carrinho com Badge -->
        <MudBadge Content="@TotalItensCarrinho" Color="Color.Secondary" Overlap="true" Bordered="true">
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Inherit" OnClick="IrParaCarrinho" />
        </MudBadge>
    </MudAppBar>

    <!-- Drawer (Menu Lateral) -->
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2" ClipMode="DrawerClipMode.Never" Variant="@DrawerVariant.Mini"
               Breakpoint="Breakpoint.Sm" PreserveOpenState="true">
        <NavMenu />
    </MudDrawer>

    <!-- Conteúdo Principal -->
    <MudMainContent Class="pt-2 pb-16">
        <MudContainer MaxWidth="MaxWidth.Medium" Class="px-2">
            @Body
        </MudContainer>

        <!-- Bottom Navigation para Mobile -->
        <MudPaper Elevation="4" Class="d-flex justify-center align-center mud-width-full py-2 px-1 fixed-bottom bottom-nav d-md-none">
            <MudIconButton Icon="@Icons.Material.Filled.Home" Color="Color.Inherit" OnClick="@(() => NavigationManager.NavigateTo("/"))" />
            <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Inherit" />
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Inherit" OnClick="IrParaCarrinho" />
            <MudIconButton Icon="@Icons.Material.Filled.Person" Color="Color.Inherit" OnClick="IrParaPerfil" />
        </MudPaper>
    </MudMainContent>
</MudLayout>

<style>
    .bottom-nav {
        height: 56px;
        z-index: 1000;
        background-color: #ea1d2c;
    }

    .mud-appbar {
        background-color: #ea1d2c !important;
    }

    .mud-button-filled.mud-button-filled-primary {
        background-color: #ea1d2c !important;
    }

        .mud-button-filled.mud-button-filled-primary:hover {
            background-color: #c1121f !important;
        }
</style>

@code {
    private bool _drawerOpen = false;
    private int TotalItensCarrinho = 0;
    private bool IsLoggedIn = false;
    private string Username = string.Empty;
    private decimal TaxaEntrega = 0;

    [Inject] private ICarrinhoService CarrinhoService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IAuthService AuthService { get; set; }
    [Inject] private IEstabelecimentoService EstabelecimentoService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await AtualizarUsuario();
        await AtualizarTotalItensCarrinho();
        await CarregarTaxaEntrega();
        CarrinhoService.CarrinhoAtualizado += AtualizarTotalItensCarrinho;
    }

    private async Task CarregarTaxaEntrega()
    {
        try
        {
            var estabelecimento = await EstabelecimentoService.GetEstabelecimentoByIdAsync(51);
            if (estabelecimento?.Estabelecimento != null)
            {
                TaxaEntrega = estabelecimento.Estabelecimento.TaxaEntregaFixa;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar a taxa de entrega: {ex.Message}");
        }
    }

    private async Task AtualizarTotalItensCarrinho()
    {
        var carrinho = await CarrinhoService.ObterCarrinhoAsync();
        TotalItensCarrinho = carrinho.Sum(x => x.Quantidade);
        StateHasChanged();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void IrParaCarrinho()
    {
        NavigationManager.NavigateTo("/carrinho");
    }

    private void IrParaPerfil()
    {
        NavigationManager.NavigateTo("/perfil");
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        IsLoggedIn = false;
        Username = string.Empty;
        StateHasChanged();
        NavigationManager.NavigateTo("/");
    }

    private async Task AtualizarUsuario()
    {
        IsLoggedIn = await AuthService.IsLoggedInAsync();
        Username = IsLoggedIn ? await AuthService.GetLoggedInUsernameAsync() : string.Empty;
        StateHasChanged();
    }

    public void Dispose()
    {
        CarrinhoService.CarrinhoAtualizado -= AtualizarTotalItensCarrinho;
    }

    private decimal TotalComEntrega => TotalItensCarrinho * TaxaEntrega; // Exemplo de cálculo

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CarrinhoService.MarcarComoInicializado();
            await AtualizarTotalItensCarrinho();
            StateHasChanged(); // Atualizar a interface
        }
    }
}
