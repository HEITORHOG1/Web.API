@using MarketplaceHybrid.Shared.Configurations
@using MarketplaceHybrid.Shared.Services.Interfaces
@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudThemeProvider Theme="AppTheme.DefaultTheme" />

<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Primary" Dense="true" Fixed="true" Class="px-2">
        <!-- Menu Button visible on all screens -->
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />

        <!-- Marketplace Title -->
        <MudText Typo="Typo.h6" Class="ml-2 cursor-pointer" @onclick="@(() => NavigationManager.NavigateTo("/"))">Marketplace</MudText>

        <MudSpacer />

        <!-- User menu - only visible on medium+ screens -->
        @if (IsLoggedIn)
        {
            <MudMenu Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Dense="true" Class="d-none d-md-inline-flex">
                <MudMenuItem Class="px-2 py-1">Olá, @Username</MudMenuItem>
                <MudDivider />
                <MudMenuItem OnClick="IrParaPerfil" Class="px-2 py-1">Meu Perfil</MudMenuItem>
                <MudMenuItem OnClick="Logout" Class="px-2 py-1">Sair</MudMenuItem>
            </MudMenu>
        }
        else
        {
            <MudButton Color="Color.Inherit" OnClick="@(() => NavigationManager.NavigateTo("/login"))" Class="d-none d-md-inline-flex">
                Entrar
            </MudButton>
        }

        <!-- Cart Icon with Badge -->
        <MudBadge Content="@TotalItensCarrinho" Color="Color.Secondary" Overlap="true" Bordered="true" Class="mx-2">
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Inherit" OnClick="IrParaCarrinho" />
        </MudBadge>
    </MudAppBar>

    <!-- Drawer (Side Menu) - Responsive behavior -->
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1" ClipMode="DrawerClipMode.Always"
               Variant="@DrawerVariant.Responsive" Breakpoint="Breakpoint.Md">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6" Color="Color.Primary">Menu</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>

    <!-- Main Content with appropriate padding for fixed navbar -->
    <MudMainContent Class="pt-16 pb-16">
        <MudContainer MaxWidth="MaxWidth.Large" Class="py-4 px-2">
            @Body
        </MudContainer>

        <!-- Bottom Navigation for Mobile (hidden on md+ screens) -->
        <MudPaper Elevation="4" Class="d-flex justify-space-between align-center mud-width-full py-2 px-1 fixed-bottom bottom-nav d-md-none">
            <MudIconButton Icon="@Icons.Material.Filled.Home" Color="Color.Inherit" OnClick="@(() => NavigationManager.NavigateTo("/"))" />
            <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Inherit" OnClick="@(() => NavigationManager.NavigateTo("/search"))" />
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Inherit" OnClick="IrParaCarrinho"
                           Class="position-relative">
                @if (TotalItensCarrinho > 0)
                {
                    <span class="cart-badge">@TotalItensCarrinho</span>
                }
            </MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Person" Color="Color.Inherit" OnClick="IrParaPerfil" />
        </MudPaper>
    </MudMainContent>
</MudLayout>

<style>
    .bottom-nav {
        height: 56px;
        z-index: 1000;
        background-color: #ffffff;
        border-top: 1px solid #e0e0e0;
    }

    .cart-badge {
        position: absolute;
        top: 0;
        right: 0;
        background-color: #ea1d2c;
        color: white;
        border-radius: 50%;
        padding: 0 4px;
        font-size: 10px;
        min-width: 16px;
        height: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    /* Make sure we don't get stuck in a closed drawer state */
    .mud-drawer-open {
        width: 250px !important;
    }

    /* Adjust drawer items spacing */
    ::deep .mud-nav-link {
        padding: 12px 16px;
        border-radius: 4px;
        margin: 2px 8px;
        transition: all 0.2s ease-in-out;
    }

        ::deep .mud-nav-link.active {
            background-color: rgba(234, 29, 44, 0.1) !important;
            color: #ea1d2c !important;
            border-right: 3px solid #ea1d2c;
        }

        ::deep .mud-nav-link:hover {
            background-color: rgba(234, 29, 44, 0.05) !important;
        }
</style>

@code {
    private bool _drawerOpen = false;
    private int TotalItensCarrinho = 0;
    private bool IsLoggedIn = false;
    private string Username = string.Empty;
    private decimal TaxaEntrega = 0;

    [Inject] private ICarrinhoService CarrinhoService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IAuthService AuthService { get; set; }
    [Inject] private IEstabelecimentoService EstabelecimentoService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await AtualizarUsuario();
        await AtualizarTotalItensCarrinho();
        await CarregarTaxaEntrega();
        CarrinhoService.CarrinhoAtualizado += AtualizarTotalItensCarrinho;
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task CarregarTaxaEntrega()
    {
        try
        {
            var estabelecimento = await EstabelecimentoService.GetEstabelecimentoByIdAsync(Endpoints.EstabelecimentoID);
            if (estabelecimento?.Estabelecimento != null)
            {
                TaxaEntrega = estabelecimento.Estabelecimento.TaxaEntregaFixa ?? 0m;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar a taxa de entrega: {ex.Message}");
        }
    }

    private async Task AtualizarTotalItensCarrinho()
    {
        var carrinho = await CarrinhoService.ObterCarrinhoAsync();
        TotalItensCarrinho = carrinho.Sum(x => x.Quantidade);
        StateHasChanged();
    }

    private void IrParaCarrinho()
    {
        NavigationManager.NavigateTo("/carrinho");
    }

    private void IrParaPerfil()
    {
        if (IsLoggedIn)
            NavigationManager.NavigateTo("/perfil");
        else
            NavigationManager.NavigateTo("/login");
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        IsLoggedIn = false;
        Username = string.Empty;
        StateHasChanged();
        NavigationManager.NavigateTo("/");
    }

    private async Task AtualizarUsuario()
    {
        IsLoggedIn = await AuthService.IsLoggedInAsync();
        Username = IsLoggedIn ? await AuthService.GetLoggedInUsernameAsync() : string.Empty;
        StateHasChanged();
    }

    public void Dispose()
    {
        CarrinhoService.CarrinhoAtualizado -= AtualizarTotalItensCarrinho;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CarrinhoService.MarcarComoInicializado();
            await AtualizarTotalItensCarrinho();
            StateHasChanged();
        }
    }
}