@using MarketplaceHybrid.Shared.Configurations
@using MarketplaceHybrid.Shared.Services.Interfaces
@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="2" Color="Color.Primary">
        <!-- Botão de Menu -->
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />

        <!-- Título do Marketplace -->
        <MudText Typo="Typo.h6" Class="ml-2">Marketplace</MudText>

        <MudSpacer />

        <!-- Nome do Usuário e Menu -->
        @if (IsLoggedIn)
        {
              <MudButton StartIcon="@Icons.Material.Filled.AccountCircle" Color="Color.Secondary">
                    Bem-vindo, @Username
                </MudButton>
           <MudMenu Label="Perfil" Variant="Variant.Outlined" Color="Color.Secondary">
                <MudMenuItem OnClick="IrParaPerfil">Editar Perfil</MudMenuItem>
                <MudMenuItem OnClick="Logout">Sair</MudMenuItem>
            </MudMenu>
        }

        <!-- Ícone do Carrinho com Badge -->
        <MudBadge Content="@TotalItensCarrinho" Color="Color.Error">
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Inherit" OnClick="IrParaCarrinho" />
        </MudBadge>
    </MudAppBar>

    <!-- Drawer (Menu Lateral) -->
    <MudDrawer @bind-Open="_drawerOpen" Elevation="4" ClipMode="DrawerClipMode.Never">
        <NavMenu />
    </MudDrawer>

    <!-- Conteúdo Principal -->
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private int TotalItensCarrinho = 0;
    private bool IsLoggedIn = false;
    private string Username = string.Empty;
    private decimal TaxaEntrega = 0; // Taxa de entrega do estabelecimento

    [Inject] private ICarrinhoService CarrinhoService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IAuthService AuthService { get; set; }
    [Inject] private IEstabelecimentoService EstabelecimentoService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await AtualizarUsuario();
        await AtualizarTotalItensCarrinho();
        await CarregarTaxaEntrega(); // Obter taxa de entrega
        CarrinhoService.CarrinhoAtualizado += AtualizarTotalItensCarrinho;
    }

    private async Task CarregarTaxaEntrega()
    {
        try
        {
            var estabelecimento = await EstabelecimentoService.GetEstabelecimentoByIdAsync(51);
            if (estabelecimento?.Estabelecimento != null)
            {
                TaxaEntrega = estabelecimento.Estabelecimento.TaxaEntregaFixa;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar a taxa de entrega: {ex.Message}");
        }
    }

    private async Task AtualizarTotalItensCarrinho()
    {
        var carrinho = await CarrinhoService.ObterCarrinhoAsync();
        TotalItensCarrinho = carrinho.Sum(x => x.Quantidade);
        StateHasChanged();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void IrParaCarrinho()
    {
        NavigationManager.NavigateTo("/carrinho");
    }

    private void IrParaPerfil()
    {
        NavigationManager.NavigateTo("/perfil");
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        IsLoggedIn = false;
        Username = string.Empty;
        StateHasChanged();
        NavigationManager.NavigateTo("/");
    }

    private async Task AtualizarUsuario()
    {
        IsLoggedIn = await AuthService.IsLoggedInAsync();
        Username = IsLoggedIn ? await AuthService.GetLoggedInUsernameAsync() : string.Empty;
        StateHasChanged();
    }

    public void Dispose()
    {
        CarrinhoService.CarrinhoAtualizado -= AtualizarTotalItensCarrinho;
    }

    private decimal TotalComEntrega => TotalItensCarrinho * TaxaEntrega; // Exemplo de cálculo

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CarrinhoService.MarcarComoInicializado();
            await AtualizarTotalItensCarrinho();
            StateHasChanged(); // Atualizar a interface
        }
    }
}
