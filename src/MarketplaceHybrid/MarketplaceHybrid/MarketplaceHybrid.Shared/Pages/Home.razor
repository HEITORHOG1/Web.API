@page "/"
@using MarketplaceHybrid.Shared.Configurations
@using MarketplaceHybrid.Shared.Services
@using MarketplaceHybrid.Shared.Models
@using MarketplaceHybrid.Shared.Services.Interfaces
@using MudBlazor
@inject IEstabelecimentoService EstabelecimentoService
@inject IProdutoService ProdutoService
@inject IHorarioFuncionamentoService HorarioFuncionamentoService
@inject NavigationManager NavigationManager

<PageTitle>Página Inicial</PageTitle>

<!-- Banner principal -->
<MudCarousel Class="mud-width-full mud-height-full rounded-lg" Style="height:200px;" ShowArrows="true" ShowDelimiters="true" AutoCycle="true" TData="object">
    <MudCarouselItem>
        <div class="d-flex justify-center align-center" style="height:100%; background-color:#594AE2;">
            <MudText Typo="Typo.h4" Color="Color.Surface" Align="Align.Center">Ofertas Especiais</MudText>
        </div>
    </MudCarouselItem>
    <MudCarouselItem>
        <div class="d-flex justify-center align-center" style="height:100%; background-color:#FF4081;">
            <MudText Typo="Typo.h4" Color="Color.Surface" Align="Align.Center">Delivery Grátis</MudText>
        </div>
    </MudCarouselItem>
    <MudCarouselItem>
        <div class="d-flex justify-center align-center" style="height:100%; background-color:#212121;">
            <MudText Typo="Typo.h4" Color="Color.Surface" Align="Align.Center">Novos Produtos</MudText>
        </div>
    </MudCarouselItem>
</MudCarousel>

<!-- Informações do Estabelecimento -->
@if (estabelecimentos != null && estabelecimentos.Any())
{
    <MudCard Class="my-4 rounded-lg" Elevation="3">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Error" Size="Size.Large">
                    <MudIcon Icon="@Icons.Material.Filled.Restaurant" />
                </MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@estabelecimentos.First().NomeFantasia</MudText>
                <MudText Typo="Typo.caption">@estabelecimentos.First().Endereco</MudText>
            </CardHeaderContent>
           <CardHeaderActions>
                <MudChip T="string"
                         Color="@(estabelecimentos.First().EstaAberto ? Color.Success : Color.Error)"
                         Size="Size.Small"
                         Text="@(estabelecimentos.First().EstaAberto ? "Aberto" : "Fechado")">
                </MudChip>

</CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.body2">@estabelecimentos.First().Descricao</MudText>
            <div class="d-flex align-center mt-2">
                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Color="Color.Warning" />
                <MudText Typo="Typo.body2" Class="ml-1">4.7</MudText>
                <MudDivider Vertical="true" FlexItem="true" Class="mx-2" />
                <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" />
                <MudText Typo="Typo.body2" Class="ml-1">40-50 min</MudText>
                <MudDivider Vertical="true" FlexItem="true" Class="mx-2" />
                <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Size="Size.Small" />
                <MudText Typo="Typo.body2" Class="ml-1 mud-success-text">Entrega Grátis</MudText>
            </div>
        </MudCardContent>
        <MudCardActions>
            <MudButton 
                Variant="Variant.Text" 
                Color="Color.Error" 
                EndIcon="@Icons.Material.Filled.ArrowForward"
                OnClick="@(() => NavigateToLoja(estabelecimentos.First().Id))">
                Ver mais
            </MudButton>
        </MudCardActions>
    </MudCard>
}

<!-- Seção de Categorias (fake para visualização) -->
<MudText Typo="Typo.h6" Class="mb-2">Categorias</MudText>
<MudGrid>
    @if (produtos != null)
    {
        var categorias = produtos
        .Select(p => p.NomeCategoria)
        .Distinct()
        .Take(4)
        .ToList();

        @foreach (var categoria in categorias)
        {
            <MudItem xs="3">
                <MudPaper Class="d-flex align-center justify-center flex-column py-3"
                          Elevation="0" Outlined="true">
                    <MudAvatar Color="Color.Error" Style="margin-bottom:4px;" Size="Size.Medium">
                        <MudIcon Icon="@Icons.Material.Filled.Fastfood" />
                    </MudAvatar>
                    <MudText Typo="Typo.caption">@categoria</MudText>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

<!-- Lista de Produtos -->
<MudText Typo="Typo.h6" Class="mt-4 mb-2">Destaques</MudText>
@if (produtos != null && produtos.Any())
{
    <MudGrid>
        @foreach (var produto in produtos.Take(6))
        {
            <MudItem xs="12" sm="6">
                <MudCard @onclick="@(() => NavigationManager.NavigateTo($"/produtos/{51}/{produto.Id}"))"
                         Class="produto-card my-2" Elevation="2">
                    <MudCardMedia Image="@GetImageUrl(produto.Imagem)" Height="120" />
                    <MudCardContent Class="py-2 px-3">
                        <MudText Typo="Typo.subtitle1" Class="mud-text-truncate">@produto.Nome</MudText>
                        <MudText Typo="Typo.caption" Class="mud-text-truncate">@produto.Descricao</MudText>
                        <div class="d-flex justify-space-between align-center mt-2">
                            <MudText Typo="Typo.body1" Style="font-weight:bold; color:#ea1d2c;">
                                R$ @produto.Preco.ToString("N2")
                            </MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                           Color="Color.Error"
                                           Size="Size.Small"
                                           OnClick="@((e) => { NavigationManager.NavigateTo($"/produtos/{51}/{produto.Id}"); })" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    <div class="d-flex justify-center mt-3">
        <MudButton Variant="Variant.Filled" Color="Color.Error"
                   OnClick="@(() => NavigationManager.NavigateTo($"/produtos/51"))">
            Ver Todos os Produtos
        </MudButton>
    </div>
}
else
{
    <MudProgressCircular Color="Color.Error" Indeterminate="true" />
    <MudText Typo="Typo.body1" Class="ml-2">Carregando produtos...</MudText>
}

<style>
    .produto-card {
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
        overflow: hidden;
    }
    
    .produto-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .mud-card-media {
        transition: transform 0.3s;
        background-size: cover;
    }
    
    .produto-card:hover .mud-card-media {
        transform: scale(1.05);
    }
</style>

@code {
    private List<Estabelecimento>? estabelecimentos;
    private List<Cardapio>? produtos;

    protected override async Task OnInitializedAsync()
    {
        try {
            // Carrega estabelecimentos
            var estabelecimentoResponse = await EstabelecimentoService.GetEstabelecimentoByIdAsync(Endpoints.EstabelecimentoID);
            if (estabelecimentoResponse != null && estabelecimentoResponse.Estabelecimento != null)
            {
                var estabelecimento = estabelecimentoResponse.Estabelecimento;
                estabelecimento.EstaAberto = await HorarioFuncionamentoService.EstaAbertoAsync(
                    estabelecimento.Id, (int)DateTime.Now.DayOfWeek, DateTime.Now.ToString("HH:mm"));
                estabelecimentos = new List<Estabelecimento> { estabelecimento };
            }

            // Carrega produtos
            produtos = await ProdutoService.GetProdutosByEstabelecimentoIdAsync(Endpoints.EstabelecimentoID);
        }
        catch (Exception ex) {
            Console.WriteLine($"Erro ao carregar dados: {ex.Message}");
        }
    }

    private void NavigateToLoja(int id) {
        NavigationManager.NavigateTo($"/sobre/{id}");
    }

    private string GetImageUrl(string? relativePath) {
        if (string.IsNullOrEmpty(relativePath)) {
            return "https://via.placeholder.com/150";
        }
        return $"{ApiConstants.BaseUrlImagem}/{relativePath}";
    }
}