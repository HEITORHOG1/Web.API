@page "/"
@using MarketplaceHybrid.Shared.Configurations
@using MarketplaceHybrid.Shared.Services
@using MarketplaceHybrid.Shared.Models
@using MarketplaceHybrid.Shared.Services.Interfaces
@using MudBlazor
@inject IEstabelecimentoService EstabelecimentoService
@inject IProdutoService ProdutoService
@inject IHorarioFuncionamentoService HorarioFuncionamentoService
@inject NavigationManager NavigationManager

<PageTitle>Página Inicial</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">

    @* Header (Similar to the app's top section) *@
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Default" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Default" />
        <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Default" />
    </MudAppBar>

    @* Restaurant Info Section (similar to the restaurant name, address, etc) *@
    <MudPaper Class="mt-4 pa-4" Elevation="2">
        @if (estabelecimentos != null && estabelecimentos.Any())
        {
            @foreach (var estabelecimento in estabelecimentos)
            {
                <div style="display:flex; align-items: center;">
                    <MudAvatar Color="Color.Secondary" Style="margin-right: 16px;">
                        <MudIcon Icon="@Icons.Material.Filled.Restaurant" Size="Size.Large" />
                    </MudAvatar>
                    <div style="flex:1">
                        <MudText Typo="Typo.h5" Style="margin:0;">@estabelecimento.NomeFantasia</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="margin:0;">@estabelecimento.Endereco</MudText>
                    </div>
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Color="Color.Default" @onclick="() => NavigateToLoja(estabelecimento.Id)" />
                </div>
                <div style="display: flex; justify-content: space-between; margin-top: 8px;">
                    <div style="display:flex; align-items: center;">
                        <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Color="Color.Warning" />
                        <MudText Typo="Typo.body2" Inline="true" Style="margin:0; margin-left:4px;">4.7 (201 avaliações)</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.FiberManualRecord" Size="Size.Small" Color="@Color.Default" />
                        <MudText Typo="Typo.body2" Inline="true" Class="mud-text-secondary" Style="margin:0; margin-left:4px;">Nível 4 de 5</MudText>
                    </div>
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Color="Color.Default" />
                </div>
                <div style="display: flex; justify-content: space-between; margin-top: 8px;">
                    <div style="display:flex; align-items:center;">
                        <MudText Typo="Typo.body2" Inline="true" Style="margin:0; margin-right: 4px;">Entrega</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Size="Size.Small" Color="Color.Default" />
                        <MudText Typo="Typo.body2" Inline="true" Style="margin:0; margin-left:4px;">Hoje, 40-50 min</MudText>
                        <MudText Typo="Typo.body2" Inline="true" Class="mud-text-success" Style="margin:0; margin-left:4px;">Grátis</MudText>
                    </div>
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Color="Color.Default" />
                </div>
                <div style="margin-top: 8px;">
                    <MudText Typo="Typo.body1" Color="@(estabelecimento.EstaAberto ? Color.Success : Color.Error)">
                        @(estabelecimento.EstaAberto ? "Aberto" : "Fechado")
                    </MudText>
                </div>
            }
        }
        else
        {
            <MudText Typo="Typo.body1" Align="Align.Center">Carregando informações do estabelecimento...</MudText>
        }
    </MudPaper>

    @* Featured Items Section (similar to the 'Destaques' section) - Now a grid using ProductCard component *@
    <MudText Typo="Typo.h5" Class="mt-4 mb-2">Destaques</MudText>
    @if (produtos != null && produtos.Any())
    {
        <MudGrid>
            @foreach (var produto in produtos)
            {
                <MudItem xs="12" sm="6" md="4">
                    <ProdutoCard Produto="@produto" />
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudText Typo="Typo.body1" Align="Align.Center">Carregando produtos...</MudText>
    }

    <MudPaper Class="mt-4 pa-4" Elevation="2">
        <div style="display: flex; align-items: center; justify-content:center;">
            <MudIcon Icon="@Icons.Material.Filled.CardGiftcard" Color="Color.Secondary" Class="mr-2" />
            <MudText Typo="Typo.body1">Presente do Clube: desconto de R$ 12</MudText>
        </div>
    </MudPaper>

</MudContainer>

@code {
    private List<Estabelecimento>? estabelecimentos;
    private List<Cardapio>? produtos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Carrega estabelecimentos
            var estabelecimentoResponse = await EstabelecimentoService.GetEstabelecimentoByIdAsync(Endpoints.EstabelecimentoID);
            if (estabelecimentoResponse != null && estabelecimentoResponse.Estabelecimento != null)
            {
                var estabelecimento = estabelecimentoResponse.Estabelecimento;
                estabelecimento.EstaAberto = await HorarioFuncionamentoService.EstaAbertoAsync(
                    estabelecimento.Id, (int)DateTime.Now.DayOfWeek, DateTime.Now.ToString("HH:mm"));
                estabelecimentos = new List<Estabelecimento> { estabelecimento };
            }
            else
            {
                Console.WriteLine("Estabelecimento não encontrado ou resposta inválida.");
            }

            // Carrega produtos
            produtos = await ProdutoService.GetProdutosByEstabelecimentoIdAsync(Endpoints.EstabelecimentoID);
            if (produtos == null)
            {
                Console.WriteLine("Nenhum produto encontrado.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados: {ex.Message}");
        }
    }
    private void NavigateToLoja(int id)
    {
        NavigationManager.NavigateTo($"/sobre/{id}");
    }
}