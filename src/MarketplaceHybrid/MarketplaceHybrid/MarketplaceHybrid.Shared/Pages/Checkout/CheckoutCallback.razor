@page "/checkout/callback"
@using MarketplaceHybrid.Shared.Models
@using MarketplaceHybrid.Shared.Services.Interfaces
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IPedidoService PedidoService
@inject IPaymentService PaymentService
@inject ICarrinhoService CarrinhoService
@inject IDialogService DialogService
@implements IDisposable

<MudContainer MaxWidth="MaxWidth.Small" Class="py-6">
    @if (isProcessing)
    {
        <LoadingComponent Message="Processando Pagamento"
                          SubMessage="Aguarde enquanto verificamos seu pagamento..."
                          IsFullPage="true"
                          IsOverlay="true"
                          ShowLogo="true" />
    }
    else
    {
        @if (statusOk)
        {
            <div class="d-flex flex-column align-center text-center">
                <div class="success-icon-container mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle"
                             Color="Color.Success"
                             Size="Size.Large"
                             Style="font-size: 72px;" />
                </div>

                <MudText Typo="Typo.h4" Class="mb-2">Pagamento Confirmado!</MudText>

                <MudText Typo="Typo.body1" Class="mb-4">
                    Seu pagamento foi processado com sucesso.
                </MudText>

                <MudText Typo="Typo.body2" Class="d-flex align-center justify-center mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Class="mr-2" />
                    Redirecionando em @countdown segundos...
                </MudText>

                <MudProgressLinear Value="@((5 - countdown) * 20)" Class="mb-4" Color="Color.Success" />

                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="@(() => RedirectToPedido(pedidoId))"
                               StartIcon="@Icons.Material.Filled.Receipt">
                        Ver Pedido
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               OnClick="@(() => NavigationManager.NavigateTo("/"))"
                               StartIcon="@Icons.Material.Filled.Home">
                        Voltar à Loja
                    </MudButton>
                </div>
            </div>
        }
        else if (Status?.ToLower() == "pending")
        {
            <div class="d-flex flex-column align-center text-center">
                <div class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.HourglassEmpty"
                             Color="Color.Warning"
                             Size="Size.Large"
                             Style="font-size: 72px;" />
                </div>

                <MudText Typo="Typo.h4" Class="mb-2">Pagamento Pendente</MudText>

                <MudText Typo="Typo.body1" Class="mb-4">
                    Seu pagamento está sendo processado. Assim que confirmado, seu pedido será preparado.
                </MudText>

                <MudAlert Severity="Severity.Info" Class="mb-4" Icon="@Icons.Material.Filled.Info">
                    Verificação automática: tentativa @currentStatusCheck de @maxStatusChecks
                    <br />Próxima verificação em @((currentRetryTimeout / 1000).ToString()) segundos
                </MudAlert>

                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mb-4" />

                <div class="d-flex flex-column gap-2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="@(() => RedirectToPedido(pedidoId))"
                               StartIcon="@Icons.Material.Filled.Receipt">
                        Ver Pedido
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               OnClick="@ManuallyCheckStatus"
                               StartIcon="@Icons.Material.Filled.Refresh"
                               Disabled="isCheckingStatus">
                        @if (isCheckingStatus)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <span class="ms-2">Verificando...</span>
                        }
                        else
                        {
                            <span>Verificar Status Agora</span>
                        }
                    </MudButton>

                    <MudButton Variant="Variant.Text"
                               OnClick="@(() => NavigationManager.NavigateTo("/"))"
                               StartIcon="@Icons.Material.Filled.Home">
                        Voltar à Loja
                    </MudButton>
                </div>
            </div>
        }
        else
        {
            <div class="d-flex flex-column align-center text-center">
                <div class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.Error"
                             Color="Color.Error"
                             Size="Size.Large"
                             Style="font-size: 72px;" />
                </div>

                <MudText Typo="Typo.h4" Class="mb-2">@statusTitle</MudText>

                <MudText Typo="Typo.body1" Class="mb-4">
                    @statusMessage
                </MudText>

                <MudAlert Severity="Severity.Warning" Class="mb-4" Icon="@Icons.Material.Filled.WarningAmber">
                    Seu carrinho foi preservado. Você pode tentar novamente ou modificar seu pedido.
                </MudAlert>

                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="@(() => NavigationManager.NavigateTo("/carrinho"))"
                               StartIcon="@Icons.Material.Filled.ShoppingCart">
                        Voltar ao Carrinho
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               OnClick="@ReprocessPayment"
                               StartIcon="@Icons.Material.Filled.Refresh"
                               Disabled="isRetrying">
                        @if (isRetrying)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <span class="ms-2">Tentando...</span>
                        }
                        else
                        {
                            <span>Tentar Novamente</span>
                        }
                    </MudButton>
                </div>
            </div>
        }
    }
</MudContainer>

<style>
    .success-icon-container {
        animation: bounce 1s ease-in-out;
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100%

    {
        transform: translateY(0);
    }

    40% {
        transform: translateY(-30px);
    }

    60% {
        transform: translateY(-15px);
    }

    }

    .fade-out {
        opacity: 0;
        transition: opacity 1s;
    }

    .fade-in {
        opacity: 1;
        transition: opacity 1s;
    }
</style>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Status { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string ExternalReference { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? PedidoId { get; set; }

    private bool isProcessing = true;
    private bool statusOk = false;
    private bool isCheckingStatus = false;
    private bool isRetrying = false;
    private string statusTitle = "";
    private string statusMessage = "";
    private int pedidoId = 0;
    private int countdown = 5;
    private System.Threading.Timer countdownTimer;
    private System.Threading.Timer statusCheckTimer;
    private int maxStatusChecks = 10;
    private int currentStatusCheck = 0;
    private int currentRetryTimeout = 5000; // Initial 5 seconds
    private int maxRetryTimeout = 20000; // Max 20 seconds
    private bool sessionExpired = false;
    private DateTime sessionExpiryTime;
    private System.Threading.Timer sessionExpiryTimer;
    private const int SessionTimeoutMinutes = 15; // 15 minute payment session

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Set session expiry time
            sessionExpiryTime = DateTime.Now.AddMinutes(SessionTimeoutMinutes);
            StartSessionExpiryTimer();

            // Process payment callback
            if (!string.IsNullOrEmpty(Status) && !string.IsNullOrEmpty(ExternalReference))
            {
                await PaymentService.HandlePaymentCallbackAsync(Status, ExternalReference);
            }

            // Get pedidoId from query or by external reference
            if (PedidoId.HasValue)
            {
                pedidoId = PedidoId.Value;
            }
            else if (!string.IsNullOrEmpty(ExternalReference))
            {
                var pedido = await PedidoService.GetPedidoByExternalReferenceAsync(ExternalReference);
                if (pedido != null)
                {
                    pedidoId = pedido.Id;
                }
            }

            if (pedidoId > 0)
            {
                // Check order status
                await CheckPedidoStatus();
            }
            else
            {
                statusTitle = "Pedido Não Encontrado";
                statusMessage = "Não foi possível localizar seu pedido. Por favor, tente novamente ou entre em contato com o suporte.";
            }

            if (statusOk)
            {
                // Clear cart after successful payment
                await CarrinhoService.LimparCarrinhoAsync();

                // Start countdown timer for redirection
                StartCountdownTimer();
            }
            else if (Status?.ToLower() == "pending" && pedidoId > 0)
            {
                // Start periodic check for pending payments
                StartStatusCheckTimer();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao processar o callback: {ex.Message}", Severity.Error);
            statusTitle = "Erro no Processamento";
            statusMessage = "Ocorreu um erro ao verificar o status do seu pagamento.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task CheckPedidoStatus()
    {
        try
        {
            var pedido = await PedidoService.GetPedidoByIdAsync(pedidoId);

            if (string.IsNullOrEmpty(Status))
            {
                // Status not provided, check order status
                if (pedido != null)
                {
                    switch (pedido.Status)
                    {
                        case StatusPedido.PagamentoAprovado:
                        case StatusPedido.Confirmado:
                        case StatusPedido.EmPreparo:
                        case StatusPedido.Pronto:
                        case StatusPedido.SaiuParaEntrega:
                        case StatusPedido.Entregue:
                            statusOk = true;
                            break;
                        case StatusPedido.AguardandoPagamento:
                        case StatusPedido.EmProcessamento:
                        case StatusPedido.Pendente:
                            Status = "pending";
                            break;
                        case StatusPedido.Cancelado:
                            Status = "failure";
                            break;
                    }
                }
            }

            if (Status?.ToLower() == "approved")
            {
                statusOk = true;
            }
            else if (Status?.ToLower() == "pending")
            {
                statusTitle = "Pagamento Pendente";
                statusMessage = "Seu pagamento está sendo processado. Assim que confirmado, seu pedido será preparado.";
            }
            else
            {
                switch (Status?.ToLower())
                {
                    case "failure":
                    case "rejected":
                        statusTitle = "Pagamento Recusado";
                        statusMessage = "Seu pagamento não foi aprovado. Por favor, verifique os dados e tente novamente.";
                        break;
                    case "timeout":
                        statusTitle = "Tempo Esgotado";
                        statusMessage = "O tempo para completar o pagamento expirou. Por favor, tente novamente.";
                        break;
                    default:
                        statusTitle = "Status Desconhecido";
                        statusMessage = "Não foi possível determinar o status do seu pagamento. Por favor, verifique seu pedido na seção 'Meus Pedidos' ou tente novamente.";
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao verificar status do pedido: {ex.Message}", Severity.Error);
            statusTitle = "Erro de Comunicação";
            statusMessage = "Ocorreu um problema ao verificar o status do pagamento. Por favor, verifique sua conexão ou tente novamente mais tarde.";
        }
    }

    private void StartCountdownTimer()
    {
        countdownTimer = new System.Threading.Timer(
            callback: _ =>
            {
                countdown--;
                if (countdown <= 0)
                {
                    countdownTimer?.Dispose();
                    RedirectToPedido(pedidoId);
                }
                InvokeAsync(StateHasChanged);
            },
            state: null,
            dueTime: 0,
            period: 1000);
    }

    private void StartStatusCheckTimer()
    {
        currentRetryTimeout = 5000; // Reset to initial value
        statusCheckTimer = new System.Threading.Timer(
            callback: async _ =>
            {
                await CheckPaymentStatus();
            },
            state: null,
            dueTime: 3000, // First check after 3 seconds
            period: Timeout.Infinite); // We'll reschedule with increasing intervals
    }

    private void StartSessionExpiryTimer()
    {
        var timeUntilExpiry = (int)(sessionExpiryTime - DateTime.Now).TotalMilliseconds;
        if (timeUntilExpiry <= 0) return;

        sessionExpiryTimer = new System.Threading.Timer(
            callback: async _ =>
            {
                sessionExpired = true;
                Status = "timeout";
                await InvokeAsync(async () =>
                {
                    await CheckPedidoStatus();
                    statusTitle = "Sessão Expirada";
                    statusMessage = "O tempo para completar o pagamento expirou. Por favor, tente novamente.";
                    StateHasChanged();
                });

                // Stop other timers
                StopStatusCheckTimer();
                countdownTimer?.Dispose();
            },
            state: null,
            dueTime: timeUntilExpiry,
            period: Timeout.Infinite);
    }

    private async Task CheckPaymentStatus()
    {
        if (sessionExpired) return;

        currentStatusCheck++;
        isCheckingStatus = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var pedido = await PedidoService.GetPedidoByIdAsync(pedidoId);

            if (pedido != null &&
                (pedido.Status == StatusPedido.PagamentoAprovado ||
                 pedido.Status == StatusPedido.Confirmado ||
                 pedido.Status == StatusPedido.EmPreparo ||
                 pedido.Status == StatusPedido.Pronto ||
                 pedido.Status == StatusPedido.SaiuParaEntrega ||
                 pedido.Status == StatusPedido.Entregue))
            {
                statusOk = true;
                Status = "approved";
                await InvokeAsync(StateHasChanged);

                // Stop checking and start countdown
                StopStatusCheckTimer();
                StartCountdownTimer();

                // Clear cart
                await CarrinhoService.LimparCarrinhoAsync();
            }
            else if (currentStatusCheck >= maxStatusChecks)
            {
                // Stop checking after max attempts
                StopStatusCheckTimer();

                // Show dialog for user action
                if (!sessionExpired)
                {
                    await InvokeAsync(async () =>
                    {
                        var result = await DialogService.ShowMessageBox(
                            "Verificação de Pagamento",
                            "Ainda não conseguimos confirmar seu pagamento. Deseja continuar aguardando ou verificar o status no seu pedido?",
                            "Continuar Aguardando", "Ver Pedido", "Voltar à Loja");

                        if (result == null) // Voltar à Loja
                        {
                            NavigationManager.NavigateTo("/");
                        }
                        else if (result == true) // Continuar Aguardando
                        {
                            // Reset counter and restart with longer interval
                            currentStatusCheck = 0;
                            StartStatusCheckTimer();
                        }
                        else // Ver Pedido
                        {
                            RedirectToPedido(pedidoId);
                        }
                    });
                }
            }
            else
            {
                // Schedule next check with increasing delay (exponential backoff)
                currentRetryTimeout = Math.Min(currentRetryTimeout * 2, maxRetryTimeout);
                statusCheckTimer?.Change(currentRetryTimeout, Timeout.Infinite);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            // Log error but continue checking
            Console.WriteLine($"Error checking payment status: {ex.Message}");
            // Schedule next check
            if (currentStatusCheck < maxStatusChecks)
            {
                statusCheckTimer?.Change(currentRetryTimeout, Timeout.Infinite);
            }
            else
            {
                StopStatusCheckTimer();
            }
        }
        finally
        {
            isCheckingStatus = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void StopStatusCheckTimer()
    {
        statusCheckTimer?.Change(Timeout.Infinite, Timeout.Infinite);
        statusCheckTimer?.Dispose();
        statusCheckTimer = null;
    }

    private async Task ManuallyCheckStatus()
    {
        if (isCheckingStatus) return;

        isCheckingStatus = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var pedido = await PedidoService.GetPedidoByIdAsync(pedidoId);

            if (pedido != null &&
                (pedido.Status == StatusPedido.PagamentoAprovado ||
                 pedido.Status == StatusPedido.Confirmado ||
                 pedido.Status == StatusPedido.EmPreparo ||
                 pedido.Status == StatusPedido.Pronto ||
                 pedido.Status == StatusPedido.SaiuParaEntrega ||
                 pedido.Status == StatusPedido.Entregue))
            {
                statusOk = true;
                Status = "approved";

                // Stop checking and start countdown
                StopStatusCheckTimer();
                StartCountdownTimer();

                // Clear cart
                await CarrinhoService.LimparCarrinhoAsync();

                Snackbar.Add("Pagamento aprovado! Redirecionando...", Severity.Success);
            }
            else
            {
                Snackbar.Add("O pagamento ainda está sendo processado. Por favor, aguarde...", Severity.Info);

                // Restart timer if it was stopped
                if (statusCheckTimer == null && !sessionExpired)
                {
                    currentStatusCheck = 0;
                    StartStatusCheckTimer();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao verificar status: {ex.Message}", Severity.Error);
        }
        finally
        {
            isCheckingStatus = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ReprocessPayment()
    {
        if (isRetrying) return;

        isRetrying = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            // Preserve the cart if it was cleared
            if (sessionExpired)
            {
                // Reset the session
                sessionExpired = false;
                sessionExpiryTime = DateTime.Now.AddMinutes(SessionTimeoutMinutes);
                StartSessionExpiryTimer();
            }

            // Redirect back to checkout page
            NavigationManager.NavigateTo("/finalizar-pedido");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao reprocessar pagamento: {ex.Message}", Severity.Error);
        }
        finally
        {
            isRetrying = false;
        }
    }

    private void RedirectToPedido(int id)
    {
        countdownTimer?.Dispose();
        StopStatusCheckTimer();
        sessionExpiryTimer?.Dispose();
        NavigationManager.NavigateTo($"/pagamento-confirmado/{id}");
    }

    public void Dispose()
    {
        countdownTimer?.Dispose();
        StopStatusCheckTimer();
        sessionExpiryTimer?.Dispose();
    }
}