@page "/pagamento-confirmado/{pedidoId:int}"
@using MarketplaceHybrid.Shared.Models
@using MarketplaceHybrid.Shared.Services.Interfaces
@inject NavigationManager NavigationManager
@inject IPedidoService PedidoService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small" Class="py-6">
    <!-- Checkout Progress -->
    <CheckoutProgress CurrentStep="3" />
    
    @if (isLoading)
    {
        <LoadingComponent 
            Message="Carregando informações do pedido" 
            SubMessage="Aguarde um momento..."
            IsFullPage="true" 
            ShowLogo="true" />
    }
    else if (pedido == null)
    {
        <MudPaper Class="pa-6 mb-4 d-flex flex-column align-center">
            <MudIcon Icon="@Icons.Material.Filled.Error" 
                    Size="Size.Large" 
                    Color="Color.Error" 
                    Class="mb-3" />
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">
                Pedido não encontrado
            </MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-4">
                Não foi possível encontrar as informações do seu pedido
            </MudText>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      OnClick="@(() => NavigationManager.NavigateTo("/"))"
                      StartIcon="@Icons.Material.Filled.Home">
                Voltar para o Início
            </MudButton>
        </MudPaper>
    }
    else
    {
        <div class="d-flex flex-column align-center text-center">
            <div class="success-icon-container mb-4">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" 
                         Color="Color.Success" 
                         Size="Size.Large" 
                         Style="font-size: 72px;" />
            </div>
            
            <MudText Typo="Typo.h4" Class="mb-2">Pedido Confirmado!</MudText>
            
            <MudText Typo="Typo.body1" Class="mb-4">
                Seu pedido #@PedidoId foi confirmado com sucesso e será preparado em breve.
            </MudText>
            
            <MudDivider Class="my-4 w-100" />
            
            <MudPaper Class="pa-4 mb-4 w-100" Elevation="2">
                <MudText Typo="Typo.h6" Class="mb-3">Detalhes do Pedido</MudText>
                
                <div class="d-flex justify-space-between mb-2">
                    <MudText Typo="Typo.subtitle2">Status:</MudText>
                    <MudChip T="object"
                             Color="@GetStatusColor(pedido.Status)"
                             Size="Size.Small">
                        @GetStatusText(pedido.Status)
                    </MudChip>

                </div>
                
                <div class="d-flex justify-space-between mb-2">
                    <MudText Typo="Typo.subtitle2">Data do Pedido:</MudText>
                    <MudText Typo="Typo.body2">
                        @pedido.DataCriacao.ToLocalTime().ToString("dd/MM/yyyy HH:mm")
                    </MudText>
                </div>
                
                <div class="d-flex justify-space-between mb-2">
                    <MudText Typo="Typo.subtitle2">Total:</MudText>
                    <MudText Typo="Typo.body2">R$ @pedido.ValorTotal.ToString("N2")</MudText>
                </div>
                
                <div class="d-flex justify-space-between mb-2">
                    <MudText Typo="Typo.subtitle2">Forma de Pagamento:</MudText>
                    <MudText Typo="Typo.body2">@GetPaymentMethodText(pedido.FormaPagamento)</MudText>
                </div>
                
                <MudDivider Class="my-3" />
                
                <MudText Typo="Typo.subtitle2" Class="mb-2">Itens do Pedido:</MudText>
                
                @foreach (var item in pedido.Itens)
                {
                    <div class="d-flex justify-space-between mb-1">
                        <MudText Typo="Typo.body2">@item.Quantidade x @item.NomeProduto</MudText>
                        <MudText Typo="Typo.body2">R$ @item.Subtotal.ToString("N2")</MudText>
                    </div>
                }
                
                <MudDivider Class="my-3" />
                
                <MudText Typo="Typo.subtitle2" Class="mb-2">Endereço de Entrega:</MudText>
                <MudText Typo="Typo.body2" Class="mb-3">@pedido.EnderecoEntrega</MudText>
                
                <MudText Typo="Typo.body2" Class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Class="mr-2" />
                    Tempo estimado de entrega: 30-45 minutos
                </MudText>
            </MudPaper>
            
            <div class="d-flex gap-2">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="@(() => NavigationManager.NavigateTo("/"))"
                           StartIcon="@Icons.Material.Filled.Home">
                    Página Inicial
                </MudButton>
                
                <MudButton Variant="Variant.Outlined"
                           OnClick="@(() => NavigationManager.NavigateTo("/pedidos"))"
                           StartIcon="@Icons.Material.Filled.Receipt">
                    Meus Pedidos
                </MudButton>
            </div>
        </div>
    }
</MudContainer>

<style>
    .loading-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 24px;
    }

    .loading-full {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 300px;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.9);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .loading-content {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .centered {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .logo-container {
        animation: pulse 1.5s infinite ease-in-out;
    }
    </style>

@code {
    [Parameter]
    public int PedidoId { get; set; }
    
    private bool isLoading = true;
    private PedidoCompleto pedido;
    
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        
        try
        {
            pedido = await PedidoService.GetPedidoByIdAsync(PedidoId);
            
            if (pedido == null)
            {
                Snackbar.Add("Pedido não encontrado", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar pedido: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private Color GetStatusColor(StatusPedido status)
    {
        return status switch
        {
            StatusPedido.PagamentoAprovado => Color.Success,
            StatusPedido.EmPreparo => Color.Info,
            StatusPedido.SaiuParaEntrega => Color.Info,
            StatusPedido.Entregue => Color.Success,
            StatusPedido.Cancelado => Color.Error,
            _ => Color.Default
        };
    }
    
    private string GetStatusText(StatusPedido status)
    {
        return status switch
        {
            StatusPedido.Criado => "Criado",
            StatusPedido.AguardandoPagamento => "Aguardando Pagamento",
            StatusPedido.PagamentoAprovado => "Pagamento Aprovado",
            StatusPedido.EmPreparo => "Em Preparo",
            StatusPedido.SaiuParaEntrega => "Saiu para Entrega",
            StatusPedido.Entregue => "Entregue",
            StatusPedido.Cancelado => "Cancelado",
            _ => "Desconhecido"
        };
    }
    
    private string GetPaymentMethodText(FormaPagamento formaPagamento)
    {
        return formaPagamento switch
        {
            FormaPagamento.Dinheiro => "Dinheiro",
            FormaPagamento.CartaoCredito => "Cartão de Crédito",
            FormaPagamento.CartaoDebito => "Cartão de Débito",
            FormaPagamento.Pix => "Pix",
            _ => "Desconhecido"
        };
    }
}