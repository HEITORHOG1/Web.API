@page "/carrinho"
@using MarketplaceHybrid.Shared.Configurations
@using MarketplaceHybrid.Shared.Models
@using MarketplaceHybrid.Shared.Services.Interfaces
@inject ICarrinhoService CarrinhoService
@inject NavigationManager NavigationManager
@inject IEstabelecimentoService EstabelecimentoService
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-4">
    <MudText Typo="Typo.h5" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Class="mr-2" />
        Meu Carrinho
    </MudText>

    @if (isLoading)
    {
        <div class="d-flex justify-center my-8">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else if (carrinho == null || !carrinho.Any())
    {
        <MudPaper Class="pa-6 mb-4 d-flex flex-column align-center">
            <MudIcon Icon="@Icons.Material.Filled.RemoveShoppingCart" 
                     Size="Size.Large" 
                     Color="Color.Default" 
                     Class="mb-3" />
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Seu carrinho está vazio</MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-4">
                Adicione produtos para fazer seu pedido
            </MudText>
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       OnClick="VoltarParaCardapio"
                       StartIcon="@Icons.Material.Filled.ArrowBack">
                Explorar Cardápio
            </MudButton>
        </MudPaper>
    }
    else
    {
        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <MudText Typo="Typo.subtitle1" Class="mb-3">Itens do Pedido</MudText>
            
            <MudDivider Class="mb-4" />
            
            @foreach (var item in carrinho)
            {
                <div class="d-flex align-center py-2 cart-item">
                    <div class="d-flex flex-grow-1 align-center">
                        <MudText Typo="Typo.body1" Class="flex-grow-1">
                            <strong>@item.Nome</strong>
                        </MudText>
                        <div class="d-flex align-center mx-4">
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" 
                                           Size="Size.Small"
                                           Color="Color.Default" 
                                           OnClick="@(() => AtualizarQuantidade(item, -1))" />
                                           
                            <MudText Typo="Typo.body1" Class="mx-3">@item.Quantidade</MudText>
                            
                            <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                           Size="Size.Small"
                                           Color="Color.Default" 
                                           OnClick="@(() => AtualizarQuantidade(item, 1))" />
                        </div>
                        <MudText Typo="Typo.body1" Style="min-width: 90px; text-align: right">
                            R$ @item.Total.ToString("N2")
                        </MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                       Size="Size.Small"
                                       Color="Color.Error" 
                                       OnClick="@(() => RemoverItem(item))"
                                       Class="ml-2" />
                    </div>
                </div>
                <MudDivider />
            }
            
            <div class="d-flex justify-end mt-4 pt-2">
                <MudButton Variant="Variant.Text"
                           StartIcon="@Icons.Material.Filled.DeleteSweep"
                           Color="Color.Error"
                           OnClick="ConfirmarLimparCarrinho">
                    Limpar Carrinho
                </MudButton>
            </div>
        </MudPaper>

        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <MudText Typo="Typo.subtitle1" Class="mb-3">Resumo do Pedido</MudText>
            
            <MudDivider Class="mb-3" />
            
            <div class="d-flex justify-space-between mb-2">
                <MudText Typo="Typo.body1">Subtotal</MudText>
                <MudText Typo="Typo.body1">R$ @TotalCarrinho.ToString("N2")</MudText>
            </div>
            
           @* não habilitar neste momento
               <div class="d-flex justify-space-between align-center mb-2">
                <div class="d-flex align-center">
                    <MudText Typo="Typo.body1">Taxa de entrega</MudText>
                    <MudTooltip Text="A taxa pode variar conforme o endereço de entrega">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="ml-1" />
                    </MudTooltip>
                </div>
                <MudText Typo="Typo.body1">
                    @if (IncluirTaxaEntrega && TaxaEntrega > 0)
                    {
                        <span>R$ @TaxaEntrega.ToString("N2")</span>
                    }
                    else
                    {
                        <span class="mud-success-text">Grátis</span>
                    }
                </MudText>
            </div> *@

            <MudCheckBox T="bool"
                         @bind-Checked="@IncluirTaxaEntrega"
                         Label="Adicionar taxa de entrega"
                         Color="Color.Primary"
                         Class="mb-3" />
            
            <MudDivider Class="my-3" />
            
            <div class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h6">Total</MudText>
                <MudText Typo="Typo.h6" Color="Color.Primary">R$ @TotalComEntrega.ToString("N2")</MudText>
            </div>
        </MudPaper>

        <div class="d-flex flex-column">
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       OnClick="FinalizarPedido"
                       StartIcon="@Icons.Material.Filled.ShoppingBag"
                       Size="Size.Large"
                       Class="py-3 mb-2">
                Finalizar Pedido
            </MudButton>
            
            <MudButton Variant="Variant.Outlined" 
                       OnClick="VoltarParaCardapio"
                       StartIcon="@Icons.Material.Filled.ArrowBack">
                Continuar Comprando
            </MudButton>
        </div>
    }
</MudContainer>

<style>
    .cart-item {
        transition: background-color 0.2s;
    }
    
    .cart-item:hover {
        background-color: rgba(0, 0, 0, 0.04);
    }
</style>

@code {
    private List<CarrinhoItem> carrinho = new();
    private decimal TotalCarrinho;
    private decimal TaxaEntrega = 0;
    private bool _incluirTaxaEntrega;
    private bool isLoading = true;

    private bool IncluirTaxaEntrega
    {
        get => _incluirTaxaEntrega;
        set
        {
            _incluirTaxaEntrega = value;
            RecalcularTotalComEntrega();
            StateHasChanged();
        }
    }

    private decimal TotalComEntrega;

    protected override async Task OnInitializedAsync()
    {
        await CarregarCarrinho();
    }

    private async Task CarregarCarrinho()
    {
        isLoading = true;
        
        try
        {
            carrinho = await CarrinhoService.ObterCarrinhoAsync();
            TotalCarrinho = carrinho.Sum(x => x.Total);

            var estabelecimento = await EstabelecimentoService.GetEstabelecimentoByIdAsync(Endpoints.EstabelecimentoID);
            if (estabelecimento?.Estabelecimento != null)
            {
                TaxaEntrega = estabelecimento.Estabelecimento.TaxaEntregaFixa.GetValueOrDefault(0m);

                // Configuração inicial - se o total for maior que 50, não cobra taxa
                IncluirTaxaEntrega = TotalCarrinho < 50;
            }

            RecalcularTotalComEntrega();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar carrinho: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void RecalcularTotalComEntrega()
    {
        TotalComEntrega = TotalCarrinho + (IncluirTaxaEntrega ? TaxaEntrega : 0);
    }

    private async Task AtualizarQuantidade(CarrinhoItem item, int alteracao)
    {
        var novaQuantidade = item.Quantidade + alteracao;
        
        if (novaQuantidade <= 0)
        {
            await RemoverItem(item);
            return;
        }
        
        // Cria um DTO para atualizar a quantidade
        var itemDto = new AtualizarQuantidadeDto
        {
            ProdutoId = item.ProdutoId,
            EstabelecimentoId = item.EstabelecimentoId,
            Quantidade = alteracao // Passa apenas a alteração, não a quantidade total
        };
        
        try
        {
            await CarrinhoService.AtualizarCarrinhoAsync(itemDto);
            await CarregarCarrinho(); // Recarrega o carrinho para atualizar totais
            Snackbar.Add("Carrinho atualizado", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao atualizar carrinho: {ex.Message}", Severity.Error);
        }
    }

    private async Task RemoverItem(CarrinhoItem item)
    {
        bool? confirmacao = await DialogService.ShowMessageBox(
            "Remover item",
            "Deseja remover este item do carrinho?",
            "Sim", "Não", null);
            
        if (confirmacao == true)
        {
            try
            {
                await CarrinhoService.RemoverDoCarrinhoAsync(item.ProdutoId);
                await CarregarCarrinho();
                Snackbar.Add("Item removido do carrinho", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao remover item: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ConfirmarLimparCarrinho()
    {
        bool? confirmacao = await DialogService.ShowMessageBox(
            "Limpar carrinho",
            "Tem certeza que deseja remover todos os itens do carrinho?",
            "Sim", "Não", null);
            
        if (confirmacao == true)
        {
            try
            {
                await CarrinhoService.LimparCarrinhoAsync();
                await CarregarCarrinho();
                Snackbar.Add("Carrinho limpo com sucesso", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao limpar carrinho: {ex.Message}", Severity.Error);
            }
        }
    }

    private void VoltarParaCardapio()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task FinalizarPedido()
    {
        if (!carrinho.Any())
        {
            Snackbar.Add("Adicione produtos ao carrinho antes de finalizar o pedido", Severity.Warning);
            return;
        }

        if (!await AuthService.IsLoggedInAsync())
        {
            Snackbar.Add("Faça login para finalizar o pedido", Severity.Info);
            NavigationManager.NavigateTo($"/login?redirectUri={Uri.EscapeDataString("/endereco-frete")}");
            return;
        }

        NavigationManager.NavigateTo("/endereco-frete");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CarrinhoService.MarcarComoInicializado();
            await CarregarCarrinho();
            StateHasChanged();
        }
    }
    
    [Inject] private IDialogService DialogService { get; set; }
}