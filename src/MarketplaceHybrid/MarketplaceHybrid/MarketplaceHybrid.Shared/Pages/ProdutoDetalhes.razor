@page "/produtos/{estabelecimentoId:int}/{produtoId:int}"
@using MarketplaceHybrid.Shared.Configurations
@using MarketplaceHybrid.Shared.Models
@using MarketplaceHybrid.Shared.Services.Interfaces
@inject IProdutoService ProdutoService
@inject ICarrinhoService CarrinhoService
@inject ISnackbar Snackbar

<MudPaper Class="p-0 rounded-lg overflow-hidden" Elevation="2">
    @if (produto != null)
    {
        <div class="d-flex flex-column flex-md-row">
            <!-- Imagem do produto -->
            <div class="product-image-container">
                <MudImage Src="@GetImageUrl(produto.Imagem)" Alt="@produto.Nome" Class="product-image" 
                         ObjectFit="ObjectFit.Cover" Width="100%" Height="100%"/>
            </div>
            
            <!-- Detalhes do produto -->
            <div class="pa-4 d-flex flex-column">
                <MudText Typo="Typo.h4" Class="mb-2">@produto.Nome</MudText>
                <MudText Typo="Typo.body1" Class="mb-4">@produto.Descricao</MudText>
                
                <MudDivider Class="my-3" />
                
                <MudText Typo="Typo.h5" Color="Color.Error" Class="mb-4" Style="font-weight:bold">
                    R$ @produto.Preco.ToString("N2")
                </MudText>
                
                @if (produto.Disponivel && produto.QuantidadeEmEstoque > 0)
                {
                    <MudChip Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success">
                        Disponível (@produto.QuantidadeEmEstoque em estoque)
                    </MudChip>
                }
                else
                {
                    <MudChip Icon="@Icons.Material.Filled.Cancel" Color="Color.Error">
                        Indisponível
                    </MudChip>
                }
                
                <MudDivider Class="my-4" />
                
                <!-- Quantidade -->
                <MudText Typo="Typo.subtitle1" Class="mb-2">Quantidade:</MudText>
                <div class="d-flex align-center mb-4">
                    <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Error" 
                                  Disabled="@(quantidade <= 1)" OnClick="DecrementarQuantidade" />
                    <MudText Typo="Typo.h6" Class="mx-4">@quantidade</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Error" 
                                  Disabled="@(quantidade >= produto.QuantidadeEmEstoque)" OnClick="IncrementarQuantidade" />
                </div>
                
                <!-- Botão adicionar ao carrinho -->
                <MudButton Variant="Variant.Filled" Color="Color.Error" 
                          FullWidth="true" OnClick="AdicionarAoCarrinho"
                          StartIcon="@Icons.Material.Filled.ShoppingCart" Size="Size.Large"
                          Disabled="@(!produto.Disponivel || produto.QuantidadeEmEstoque <= 0)">
                    Adicionar - R$ @((quantidade * produto.Preco).ToString("N2"))
                </MudButton>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex align-center justify-center pa-6">
            <MudProgressCircular Color="Color.Error" Indeterminate="true" />
            <MudText Class="ml-3">Carregando produto...</MudText>
        </div>
    }
</MudPaper>

<style>
    .product-image-container {
        height: 350px;
        width: 100%;
        overflow: hidden;
    }
    
    @media(min-width: 600px) {
        .product-image-container {
            width: 40%;
            height: auto;
        }
    }
    
    .product-image {
        transition: transform 0.3s;
    }
    
    .product-image:hover {
        transform: scale(1.05);
    }
</style>


@code {
    [Parameter]
    public int EstabelecimentoId { get; set; }

    [Parameter]
    public int ProdutoId { get; set; }

    private Cardapio? produto;
    private int quantidade = 1;
    private bool erroCarregamento = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CarrinhoService.MarcarComoInicializado(); // Inicializa o JSInterop
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            produto = await ProdutoService.GetProdutoByIdAsync(EstabelecimentoId, ProdutoId);
            if (produto == null)
            {
                erroCarregamento = true;
            }
        }
        catch (Exception ex)
        {
            erroCarregamento = true;
            Console.WriteLine($"Erro ao carregar os detalhes do produto: {ex.Message}");
        }
    }

    private void IncrementarQuantidade()
    {
        if (produto != null && quantidade < produto.QuantidadeEmEstoque)
        {
            quantidade++;
        }
    }

    private void DecrementarQuantidade()
    {
        if (quantidade > 1)
        {
            quantidade--;
        }
    }

    private async Task AdicionarAoCarrinho()
    {
        if (produto != null)
        {
            var item = new CarrinhoItem
            {
                ProdutoId = produto.Id,
                Nome = produto.Nome,
                Preco = produto.Preco,
                Quantidade = quantidade
            };

            await CarrinhoService.AdicionarAoCarrinhoAsync(item);
            Console.WriteLine("Produto adicionado ao carrinho!");
        }
    }

    private string GetImageUrl(string? relativePath)
    {
        if (string.IsNullOrEmpty(relativePath))
        {
            return "https://via.placeholder.com/150";
        }

        return $"{ApiConstants.BaseUrlImagem}/{relativePath}";
    }
}
