@page "/produtos/{estabelecimentoId:int}/{produtoId:int}"
@using MarketplaceHybrid.Shared.Configurations
@using MarketplaceHybrid.Shared.Models
@using MarketplaceHybrid.Shared.Services.Interfaces
@inject IProdutoService ProdutoService
@inject ICarrinhoService CarrinhoService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-4">
    @if (isLoading)
    {
        <div class="d-flex flex-column align-center justify-center py-8">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.subtitle1" Class="mt-4">Carregando produto...</MudText>
        </div>
    }
    else if (erroCarregamento)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-4">
            Erro ao carregar o produto. Tente novamente.
            <MudButton Variant="Variant.Text" Color="Color.Inherit" OnClick="@(() => NavigationManager.NavigateTo("/"))">
                Voltar para a página inicial
            </MudButton>
        </MudAlert>
    }
    else if (produto != null)
    {
        <MudBreadcrumbs Items="@breadcrumbs" Separator="/" />

        <MudGrid Class="mt-4">
            <!-- Coluna da Imagem do Produto -->
            <MudItem xs="12" md="6" Class="position-relative">
                <MudCard Elevation="0" Class="h-100">
                    <MudCardMedia Image="@GetImageUrl(produto.Imagem)"
                                  Height="300"
                                  Style="background-size: contain; background-position: center;" />
                    <!-- Chip posicionado via CSS; não intercepta cliques -->
                    <div class="status-chip">
                        <MudChip T="object"
                                 Color="@(produto.Disponivel? Color.Success: Color.Error)"
                                 Size="Size.Small"
                                 Label="true">
                            @(produto.Disponivel ? "Disponível" : "Indisponível")
                        </MudChip>
                    </div>
                </MudCard>
            </MudItem>

            <!-- Coluna de Informações e Ações -->
            <MudItem xs="12" md="6">
                <div class="d-flex flex-column h-100">
                    <MudText Typo="Typo.h4" Class="mb-2">@produto.Nome</MudText>

                    <MudText Typo="Typo.body1" Class="mb-4 product-description">
                        @produto.Descricao
                    </MudText>

                    <MudDivider Class="my-3" />

                    <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-4" Style="font-weight:bold">
                        R$ @produto.Preco.ToString("N2")
                    </MudText>

                    <!-- Quantidade -->
                    <MudText Typo="Typo.subtitle1" Style="font-weight:500" Class="mb-2">Quantidade:</MudText>
                    <div>
                        <MudIconButton Icon="@Icons.Material.Filled.Remove"
                                       Color="Color.Primary"
                                       Size="Size.Medium"
                                       Disabled="@(quantidade <= 1)"
                                       OnClick="DecrementarQuantidade" />

                        <MudText Typo="Typo.h6" Class="mx-6 text-center" Style="min-width: 40px">
                            @quantidade
                        </MudText>

                        <MudIconButton Icon="@Icons.Material.Filled.Add"
                                       Color="Color.Primary"
                                       Size="Size.Medium"
                                       Disabled="@(quantidade >= produto.QuantidadeEmEstoque)"
                                       OnClick="IncrementarQuantidade" />
                    </div>

                    @if (produto.Opcoes != null && produto.Opcoes.Any())
                    {
                        <MudExpansionPanels Class="mb-4">
                            <MudExpansionPanel Text="Opções Disponíveis" IsInitiallyExpanded="true">
                                @foreach (var opcao in produto.Opcoes)
                                {
                                    <MudText Typo="Typo.subtitle1" Class="mt-3 mb-1">
                                        @opcao.Nome @(opcao.Obrigatorio ? "(Obrigatório)" : "(Opcional)")
                                    </MudText>
                                    <MudRadioGroup @bind-Value="selectedOptions[opcao.Id]"
                                                   Class="ml-4"
                                                   Required="@opcao.Obrigatorio">
                                        @foreach (var valor in opcao.Valores)
                                        {
                                            <MudRadio Value="@valor.Id.ToString()"
                                                      Color="Color.Primary">
                                                @valor.Descricao
                                                @if (valor.PrecoAdicional > 0)
                                                {
                                                    <span>(+R$ @valor.PrecoAdicional.ToString("N2"))</span>
                                                }
                                            </MudRadio>
                                        }
                                    </MudRadioGroup>
                                }
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    }

                    @if (produto.Adicionais != null && produto.Adicionais.Any())
                    {
                        <MudExpansionPanels Class="mb-4">
                            <MudExpansionPanel Text="Adicionais" IsInitiallyExpanded="true">
                                @foreach (var adicional in produto.Adicionais)
                                {
                                    <MudCheckBox T="bool"
                                                 @bind-Checked="selectedAdicionais[adicional.Id]"
                                                 Color="Color.Primary"
                                                 Label="@($"{adicional.Nome} (+R$ {adicional.Preco.ToString("N2")})")" />
                                }
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    }

                    <div class="d-flex align-center mt-2 mb-4">
                        <MudTextField T="string"
                                      @bind-Value="observacao"
                                      Label="Observações"
                                      Variant="Variant.Outlined"
                                      Lines="2"
                                      FullWidth="true"
                                      Placeholder="Ex: Sem cebola, molho à parte, etc." />
                    </div>

                    <MudSpacer />

                    <!-- Preço Total -->
                    <MudPaper Elevation="0" Class="px-4 py-3 mb-4" Style="background-color: #f9f9f9; border-radius: 8px;">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.h6">Total</MudText>
                            <MudText Typo="Typo.h5" Color="Color.Primary" Style="font-weight: bold;">
                                R$ @CalcularPrecoTotal().ToString("N2")
                            </MudText>
                        </div>
                    </MudPaper>

                    <!-- Botões de ação -->
                    <div class="d-flex flex-column gap-2">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   FullWidth="true"
                                   OnClick="AdicionarAoCarrinho"
                                   StartIcon="@Icons.Material.Filled.ShoppingCart"
                                   Size="Size.Large"
                                   Disabled="@(!produto.Disponivel || produto.QuantidadeEmEstoque <= 0 || isAdding)"
                                   Class="py-3">
                            @if (isAdding)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <span class="ms-2">Adicionando...</span>
                            }
                            else
                            {
                                <span>Adicionar ao Carrinho</span>
                            }
                        </MudButton>

                        <MudButton Variant="Variant.Outlined"
                                   FullWidth="true"
                                   OnClick="@(() => NavigationManager.NavigateTo($"/cardapio/{EstabelecimentoId}"))">
                            Continuar Comprando
                        </MudButton>
                    </div>
                </div>
            </MudItem>
        </MudGrid>

        @if (showSuccessDialog)
        {
            <MudDialog Open="true" Class="product-added-dialog">
                <TitleContent>
                    <MudText Typo="Typo.h6">Produto Adicionado</MudText>
                </TitleContent>
                <DialogContent>
                    <div class="d-flex flex-column align-center">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle"
                                 Color="Color.Success"
                                 Size="Size.Large"
                                 Class="mb-3" />
                        <MudText Align="Align.Center" Class="mb-3">
                            @produto.Nome foi adicionado ao seu carrinho!
                        </MudText>
                    </div>
                </DialogContent>
                <DialogActions>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="@(() => NavigationManager.NavigateTo("/carrinho"))">
                        Ver Carrinho
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               OnClick="@(() => showSuccessDialog = false)">
                        Continuar Comprando
                    </MudButton>
                </DialogActions>
            </MudDialog>
        }
    }
</MudContainer>

<style>
    .product-description {
        line-height: 1.6;
    }

    .product-added-dialog {
        max-width: 400px;
        border-radius: 8px;
    }

    .mud-dialog-content {
        padding: 16px !important;
    }

    .position-relative {
        position: relative;
    }

    .status-chip {
        position: absolute;
        top: 8px;
        right: 8px;
        pointer-events: none;
    }
</style>

@code {
    [Parameter]
    public int EstabelecimentoId { get; set; }
    [Parameter]
    public int ProdutoId { get; set; }
    private Cardapio? produto;
    private int quantidade = 1;
    private bool erroCarregamento = false;
    private bool isLoading = true;
    private bool isAdding = false;
    private bool showSuccessDialog = false;
    private Dictionary<int, string> selectedOptions = new Dictionary<int, string>();
    private Dictionary<int, bool> selectedAdicionais = new Dictionary<int, bool>();
    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>();
    private string observacao = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CarrinhoService.MarcarComoInicializado();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            produto = await ProdutoService.GetProdutoByIdAsync(EstabelecimentoId, ProdutoId);
            if (produto == null)
            {
                erroCarregamento = true;
            }
            else
            {
                if (produto.Opcoes != null)
                {
                    foreach (var opcao in produto.Opcoes)
                    {
                        selectedOptions[opcao.Id] = (opcao.Obrigatorio && opcao.Valores.Count > 0)
                            ? opcao.Valores.First().Id.ToString()
                            : "";
                    }
                }
                if (produto.Adicionais != null)
                {
                    foreach (var adicional in produto.Adicionais)
                    {
                        selectedAdicionais[adicional.Id] = false;
                    }
                }
                breadcrumbs = new List<BreadcrumbItem>
                {
                    new BreadcrumbItem("Home", "/"),
                    new BreadcrumbItem("Cardápio", $"/cardapio/{EstabelecimentoId}"),
                    new BreadcrumbItem(produto.Nome, null, disabled: true)
                };
            }
        }
        catch (Exception ex)
        {
            erroCarregamento = true;
            Snackbar.Add($"Erro ao carregar o produto: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void IncrementarQuantidade()
    {
        if (produto != null && quantidade < produto.QuantidadeEmEstoque)
        {
            quantidade++;
        }
    }

    private void DecrementarQuantidade()
    {
        if (quantidade > 1)
        {
            quantidade--;
        }
    }

    private decimal CalcularPrecoTotal()
    {
        if (produto == null)
            return 0;

        decimal total = produto.Preco * quantidade;

        if (produto.Opcoes != null)
        {
            foreach (var opcao in produto.Opcoes)
            {
                if (!string.IsNullOrEmpty(selectedOptions[opcao.Id]) &&
                    int.TryParse(selectedOptions[opcao.Id], out int selectedOptionId))
                {
                    var selectedValue = opcao.Valores.FirstOrDefault(v => v.Id == selectedOptionId);
                    if (selectedValue != null)
                    {
                        total += selectedValue.PrecoAdicional * quantidade;
                    }
                }
            }
        }

        if (produto.Adicionais != null)
        {
            foreach (var adicional in produto.Adicionais)
            {
                if (selectedAdicionais.ContainsKey(adicional.Id) && selectedAdicionais[adicional.Id])
                {
                    total += adicional.Preco * quantidade;
                }
            }
        }

        return total;
    }

    private async Task AdicionarAoCarrinho()
    {
        if (produto == null)
            return;

        if (produto.Opcoes != null)
        {
            foreach (var opcao in produto.Opcoes.Where(o => o.Obrigatorio))
            {
                if (string.IsNullOrEmpty(selectedOptions[opcao.Id]))
                {
                    Snackbar.Add($"Por favor, selecione uma opção para: {opcao.Nome}", Severity.Warning);
                    return;
                }
            }
        }

        isAdding = true;
        try
        {
            decimal precoTotal = CalcularPrecoTotal();
            decimal precoUnitario = precoTotal / quantidade;
            var item = new CarrinhoItem
            {
                ProdutoId = produto.Id,
                Nome = produto.Nome,
                Preco = precoUnitario,
                Quantidade = quantidade,
                EstabelecimentoId = EstabelecimentoId
            };

            await CarrinhoService.AdicionarAoCarrinhoAsync(item);
            showSuccessDialog = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao adicionar ao carrinho: {ex.Message}", Severity.Error);
        }
        finally
        {
            isAdding = false;
        }
    }

    private string GetImageUrl(string? relativePath)
    {
        if (string.IsNullOrEmpty(relativePath))
        {
            return "images/placeholder-food.jpg";
        }
        return $"{ApiConstants.BaseUrlImagem}/{relativePath}";
    }
}
